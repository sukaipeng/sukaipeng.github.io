<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Mybatis 源码】反射模块</title>
      <link href="/2020/07/22/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/07/22/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E5%8F%8D%E5%B0%84%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>基于 JAVA 的反射进行封装。未完全弄懂，待续。。。</p><hr><p>参考：</p><ol><li><a href="http://svip.iocoder.cn/MyBatis/reflection-package/" target="_blank" rel="noopener">【芋道源码】精尽 MyBatis 源码分析 —— 反射模块</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> MyBatis 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mybatis 源码】解析器模块</title>
      <link href="/2020/07/19/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/07/19/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>解析器模块位于 <code>org.apache.ibatis.parsing</code>，主要功能是解析 XML 和 Property。</p><h2 id="XML-解析器"><a href="#XML-解析器" class="headerlink" title="XML 解析器"></a>XML 解析器</h2><p>相关单元测试可以查看 <code>org.apache.ibatis.parsing.XPathParserTest</code>。</p><h3 id="XPathParser"><a href="#XPathParser" class="headerlink" title="XPathParser"></a>XPathParser</h3><p>对 XPath 进行简单封装。XPath 使用查看参考2。</p><h3 id="XMLMapperEntityResolver"><a href="#XMLMapperEntityResolver" class="headerlink" title="XMLMapperEntityResolver"></a>XMLMapperEntityResolver</h3><p>加载本地的 dtd 文件。</p><h2 id="变量占位符解析器"><a href="#变量占位符解析器" class="headerlink" title="变量占位符解析器"></a>变量占位符解析器</h2><p>相关单元测试可以查看 <code>org.apache.ibatis.parsing.PropertyParserTest</code>。</p><h3 id="TokenHandler"><a href="#TokenHandler" class="headerlink" title="TokenHandler"></a>TokenHandler</h3><p>占位符处理器接口，有四个实现类，<code>VariableTokenHandler</code>、<code>BindingTokenParser</code>、<code>DynamicCheckerTokenParser</code>、<code>ParameterMappingTokenHandler</code>，其中 <code>VariableTokenHandler</code> 为解析器模块的实现类，本文也是以 <code>VariableTokenHandler</code> 为例。</p><h3 id="PropertyParser"><a href="#PropertyParser" class="headerlink" title="PropertyParser"></a>PropertyParser</h3><p><code>${}</code> 解析工具类，不可实例化。模板参数的解析可以参考该类的写法，例如短信模板。</p><p>两个属性：</p><ul><li>org.apache.ibatis.parsing.PropertyParser.enable-default-value 如果占位符匹配不到值，是否启用默认值，默认 false。</li><li>org.apache.ibatis.parsing.PropertyParser.default-value-separator 如果启用上述选项，值和默认值用什么符号分隔开，默认是“:”。示例：${key:aaaa}</li></ul><p>查看单元测试类 <code>PropertyParserTest</code>，可以得知 <code>PropertyParser#parse(String string, Properties variables)</code> 为入口，其代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string 包含占位符的文本。</span></span><br><span class="line"><span class="comment">// variables 继承自 HashTable，是一个 Map。</span></span><br><span class="line"><span class="comment">// 返回替换完占位符后的文本</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parse</span><span class="params">(String string, Properties variables)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化变量占位符处理器，其处理的占位符主要是 $&#123;key&#125;。</span></span><br><span class="line">  VariableTokenHandler handler = <span class="keyword">new</span> VariableTokenHandler(variables);</span><br><span class="line">  <span class="comment">// 通用的占位符解析器。</span></span><br><span class="line">  <span class="comment">// 主要作用是，找出占位符文本，交给 handler 替换成指定的值。</span></span><br><span class="line">  GenericTokenParser parser = <span class="keyword">new</span> GenericTokenParser(<span class="string">"$&#123;"</span>, <span class="string">"&#125;"</span>, handler);</span><br><span class="line">  <span class="keyword">return</span> parser.parse(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericTokenParser"><a href="#GenericTokenParser" class="headerlink" title="GenericTokenParser"></a>GenericTokenParser</h3><p>通用的占位符解析器，依次找出文本中的所有占位符，并调用 <code>TokenHandler</code> 替换占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTokenParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String openToken;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String closeToken;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TokenHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化解析器，传入占位符号的开头和结尾，占位符处理器。</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericTokenParser</span><span class="params">(String openToken, String closeToken, TokenHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.openToken = openToken;</span><br><span class="line">    <span class="keyword">this</span>.closeToken = closeToken;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 核心解析代码</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">parse</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || text.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 寻找占位符开头</span></span><br><span class="line">    <span class="comment">// search open token</span></span><br><span class="line">    <span class="keyword">int</span> start = text.indexOf(openToken);</span><br><span class="line">    <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 不存在占位符号</span></span><br><span class="line">      <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] src = text.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    StringBuilder expression = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (start &gt; <span class="number">0</span> &amp;&amp; src[start - <span class="number">1</span>] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">        <span class="comment">// this open token is escaped. remove the backslash and continue.</span></span><br><span class="line">        builder.append(src, offset, start - offset - <span class="number">1</span>).append(openToken);</span><br><span class="line">        offset = start + openToken.length();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// found open token. let's search close token.</span></span><br><span class="line">        <span class="keyword">if</span> (expression == <span class="keyword">null</span>) &#123;</span><br><span class="line">          expression = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          expression.setLength(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(src, offset, start - offset);</span><br><span class="line">        offset = start + openToken.length();</span><br><span class="line">        <span class="keyword">int</span> end = text.indexOf(closeToken, offset);</span><br><span class="line">        <span class="comment">// 寻找占位符结尾</span></span><br><span class="line">        <span class="keyword">while</span> (end &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (end &gt; offset &amp;&amp; src[end - <span class="number">1</span>] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">            <span class="comment">// this close token is escaped. remove the backslash and continue.</span></span><br><span class="line">            expression.append(src, offset, end - offset - <span class="number">1</span>).append(closeToken);</span><br><span class="line">            offset = end + closeToken.length();</span><br><span class="line">            end = text.indexOf(closeToken, offset);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            expression.append(src, offset, end - offset);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// close token was not found.</span></span><br><span class="line">          builder.append(src, start, src.length - start);</span><br><span class="line">          offset = src.length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 调用占位符处理器替换文本，占位符处理器替换代码在下面 VariableTokenHandler</span></span><br><span class="line">          builder.append(handler.handleToken(expression.toString()));</span><br><span class="line">          offset = end + closeToken.length();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 寻找下一个占位符开头</span></span><br><span class="line">      start = text.indexOf(openToken, offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; src.length) &#123;</span><br><span class="line">      builder.append(src, offset, src.length - offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="VariableTokenHandler"><a href="#VariableTokenHandler" class="headerlink" title="VariableTokenHandler"></a>VariableTokenHandler</h3><p><code>VariableTokenHandler</code> 为 <code>PropertyParser</code> 的静态内部类，其实现了 <code>TokenHandler</code> 接口，用于替换 <code>${}</code> 包含的占位符。关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content 占位符文本。如占位符为 $&#123;key&#125;，那么 content 为 key</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleToken</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (variables != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String key = content;</span><br><span class="line">    <span class="comment">// 是否使用默认值，由 org.apache.ibatis.parsing.PropertyParser.enable-default-value 控制。</span></span><br><span class="line">    <span class="keyword">if</span> (enableDefaultValue) &#123;</span><br><span class="line">      <span class="comment">// 分隔符，默认“:”，由 org.apache.ibatis.parsing.PropertyParser.default-value-separator 控制。</span></span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> separatorIndex = content.indexOf(defaultValueSeparator);</span><br><span class="line">      String defaultValue = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (separatorIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        key = content.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line">        defaultValue = content.substring(separatorIndex + defaultValueSeparator.length());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> variables.getProperty(key, defaultValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (variables.containsKey(key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> variables.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 匹配不到值，也没有默认值，则返回原值 $&#123;key&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"$&#123;"</span> + content + <span class="string">"&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>参考：</p><ol><li><a href="http://svip.iocoder.cn/MyBatis/parsing-package/" target="_blank" rel="noopener">【芋道源码】精尽 MyBatis 源码分析 —— 解析器模块</a></li><li><a href="https://www.yiibai.com/java_xml/java_xpath_parse_document.html" target="_blank" rel="noopener">Java XPath解析器 - 解析XML文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> MyBatis 源码 </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Mybatis 源码】项目结构及学习进度</title>
      <link href="/2020/07/18/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
      <url>/2020/07/18/%E3%80%90Mybatis-%E6%BA%90%E7%A0%81%E3%80%91%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>MyBatis 版本：3.5.6</p><table><thead><tr><th>分层</th><th>模块</th><th>定义</th><th>已完成</th></tr></thead><tbody><tr><td>基础支持层</td><td>parsing</td><td>XML 解析器和占位符解析器</td><td>是</td></tr><tr><td>基础支持层</td><td>reflection</td><td>反射封装</td><td>否</td></tr></tbody></table><hr><p>链接收藏：</p><ol><li><a href="http://svip.iocoder.cn/categories/MyBatis/" target="_blank" rel="noopener">【芋道源码】精尽 MyBatis 源码分析</a></li><li><a href="https://my.oschina.net/zudajun?tab=newest&catalogId=3532897" target="_blank" rel="noopener">Mybatis3.4.x技术内幕</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> MyBatis 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁超时问题</title>
      <link href="/2020/07/10/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/10/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>以下内容只针对单机部署的 Redis。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>加锁：SETNX key value</li><li>超时：EXPIRE key timeout</li><li>解锁：DEL key</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>互斥性。</li><li>不会发生死锁。设置过期时间。</li><li>针对同一把锁，加锁和解锁必须由【同一个请求】完成。SETNX 时，value 可设置请求的唯一 ID，解锁时，校验 ID 是否一致。</li><li>Redis 操作原子性。如，加锁 SETNX 和 EXPIRE 原子性、解锁 GET 和 DEL 原子性。</li><li>是否需要考虑分布式锁的可重入性。<ol><li><code>ThreadLocal</code></li><li>利用 Redis 的 Map，存储分布式锁 key 和重入次数，lua 脚本实现操作的原子性。</li></ol></li><li>多线程获取分布式锁的阻塞方式。<ol><li><code>Thread.sleep()</code> 配合客户端轮询获取分布式锁。</li><li>使用 Redis 的发布订阅功能。当获取锁失败时，订阅锁释放消息，获取锁成功后释放时，发送锁释放消息。</li></ol></li><li>超时问题。</li></ol><h2 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h2><p>如果线程 A 成功获取锁并设置过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁，线程 A 和线程 B 并发执行。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>通过守护线程，延长锁的过期时间。</p><ul><li><p>守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SurvivalClamProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REDIS_EXPIRE_SUCCESS = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lockTime;</span><br><span class="line">    <span class="comment">//线程关闭的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Boolean signal;</span><br><span class="line"></span><br><span class="line">    SurvivalClamProcessor(String field, String key, String value, <span class="keyword">int</span> lockTime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.lockTime = lockTime;</span><br><span class="line">        <span class="keyword">this</span>.signal = Boolean.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signal = Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> waitTime = lockTime * <span class="number">1000</span> * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (signal) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(waitTime);</span><br><span class="line">                <span class="keyword">if</span> (expandLockTime(field, key, value, lockTime) != REDIS_EXPIRE_SUCCESS) &#123;</span><br><span class="line">                    <span class="comment">// 延长锁失败。业务已经处理完成，或 Redis 丢失了锁</span></span><br><span class="line">                    <span class="keyword">this</span>.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// 处理线程被强制中断</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延长锁的过期时间</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">'get'</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">'expire'</span>, KEYS[<span class="number">1</span>],ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  <span class="keyword">return</span> <span class="string">'0'</span> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>守护线程启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SurvivalClamProcessor survivalClamProcessor = <span class="keyword">new</span> SurvivalClamProcessor(lockField, lockKey, randomValue, lockTime);</span><br><span class="line">Thread survivalThread = <span class="keyword">new</span> Thread(survivalClamProcessor);</span><br><span class="line">survivalThread.setDaemon(Boolean.TRUE);</span><br><span class="line">survivalThread.start();</span><br><span class="line">Object returnObject = joinPoint.proceed(args);</span><br><span class="line">survivalClamProcessor.stop();</span><br><span class="line">survivalThread.interrupt();</span><br><span class="line"><span class="keyword">return</span> returnObject;</span><br></pre></td></tr></table></figure></li></ul><h4 id="方案二（存疑）"><a href="#方案二（存疑）" class="headerlink" title="方案二（存疑）"></a>方案二（存疑）</h4><p>解锁时，发现锁不存在或不是当前请求的锁，进行回滚操作。</p><ol><li>线程 A 获取分布式锁 key - val1，业务未处理完成，锁过期了。</li><li>期间，线程 B 获取分布式锁 key - val2，进行业务处理。</li><li>线程 A 处理完成，释放锁时，发现锁不是原来的锁，不是 val1 而是 val2。回滚线程 A 所做的操作。</li></ol><p>【疑问点】业务处理确实需要这么长时间，每一个请求都超时，业务无法进行下去。</p><hr><p>参考：</p><ol><li><a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/" target="_blank" rel="noopener">分布式锁的实现之 redis 篇</a></li><li><a href="https://mp.weixin.qq.com/s/qJK61ew0kCExvXrqb7-RSg" target="_blank" rel="noopener">Redis 分布式锁的正确实现方式（ Java 版 ）</a></li><li><a href="https://blog.csdn.net/jaryle/article/details/102502884" target="_blank" rel="noopener">分布式锁超时问题的处理(只是参考，推荐使用redission框架和ZK做分布式锁)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/09/hello-world/"/>
      <url>/2020/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
