<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 分布式锁超时问题</title>
      <link href="/2020/07/10/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/10/Redis-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>以下内容只针对单机部署的 Redis。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>加锁：SETNX key value</li><li>超时：EXPIRE key timeout</li><li>解锁：DEL key</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>互斥性。</li><li>不会发生死锁。设置过期时间。</li><li>针对同一把锁，加锁和解锁必须由【同一个请求】完成。SETNX 时，value 可设置请求的唯一 ID，解锁时，校验 ID 是否一致。</li><li>Redis 操作原子性。如，加锁 SETNX 和 EXPIRE 原子性、解锁 GET 和 DEL 原子性。</li><li>是否需要考虑分布式锁的可重入性。<ol><li><code>ThreadLocal</code></li><li>利用 Redis 的 Map，存储分布式锁 key 和重入次数，lua 脚本实现操作的原子性。</li></ol></li><li>多线程获取分布式锁的阻塞方式。<ol><li><code>Thread.sleep()</code> 配合客户端轮询获取分布式锁。</li><li>使用 Redis 的发布订阅功能。当获取锁失败时，订阅锁释放消息，获取锁成功后释放时，发送锁释放消息。</li></ol></li><li>超时问题。</li></ol><h2 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h2><p>如果线程 A 成功获取锁并设置过期时间 30 秒，但线程 A 执行时间超过了 30 秒，锁过期自动释放，此时线程 B 获取到了锁，线程 A 和线程 B 并发执行。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>通过守护线程，延长锁的过期时间。</p><ul><li><p>守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SurvivalClamProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REDIS_EXPIRE_SUCCESS = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lockTime;</span><br><span class="line">    <span class="comment">//线程关闭的标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Boolean signal;</span><br><span class="line"></span><br><span class="line">    SurvivalClamProcessor(String field, String key, String value, <span class="keyword">int</span> lockTime) &#123;</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.lockTime = lockTime;</span><br><span class="line">        <span class="keyword">this</span>.signal = Boolean.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signal = Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> waitTime = lockTime * <span class="number">1000</span> * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span> (signal) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(waitTime);</span><br><span class="line">                <span class="keyword">if</span> (expandLockTime(field, key, value, lockTime) != REDIS_EXPIRE_SUCCESS) &#123;</span><br><span class="line">                    <span class="comment">// 延长锁失败。业务已经处理完成，或 Redis 丢失了锁</span></span><br><span class="line">                    <span class="keyword">this</span>.stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// 处理线程被强制中断</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延长锁的过期时间</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">'get'</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">'expire'</span>, KEYS[<span class="number">1</span>],ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  <span class="keyword">return</span> <span class="string">'0'</span> <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li><li><p>守护线程启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SurvivalClamProcessor survivalClamProcessor = <span class="keyword">new</span> SurvivalClamProcessor(lockField, lockKey, randomValue, lockTime);</span><br><span class="line">Thread survivalThread = <span class="keyword">new</span> Thread(survivalClamProcessor);</span><br><span class="line">survivalThread.setDaemon(Boolean.TRUE);</span><br><span class="line">survivalThread.start();</span><br><span class="line">Object returnObject = joinPoint.proceed(args);</span><br><span class="line">survivalClamProcessor.stop();</span><br><span class="line">survivalThread.interrupt();</span><br><span class="line"><span class="keyword">return</span> returnObject;</span><br></pre></td></tr></table></figure></li></ul><h4 id="方案二（存疑）"><a href="#方案二（存疑）" class="headerlink" title="方案二（存疑）"></a>方案二（存疑）</h4><p>解锁时，发现锁不存在或不是当前请求的锁，进行回滚操作。</p><ol><li>线程 A 获取分布式锁 key - val1，业务未处理完成，锁过期了。</li><li>期间，线程 B 获取分布式锁 key - val2，进行业务处理。</li><li>线程 A 处理完成，释放锁时，发现锁不是原来的锁，不是 val1 而是 val2。回滚线程 A 所做的操作。</li></ol><p>【疑问点】业务处理确实需要这么长时间，每一个请求都超时，业务无法进行下去。</p><hr><p>参考：</p><ol><li><a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/" target="_blank" rel="noopener">分布式锁的实现之 redis 篇</a></li><li><a href="https://mp.weixin.qq.com/s/qJK61ew0kCExvXrqb7-RSg" target="_blank" rel="noopener">Redis 分布式锁的正确实现方式（ Java 版 ）</a></li><li><a href="https://blog.csdn.net/jaryle/article/details/102502884" target="_blank" rel="noopener">分布式锁超时问题的处理(只是参考，推荐使用redission框架和ZK做分布式锁)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/09/hello-world/"/>
      <url>/2020/07/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
